page << create_tab_using_ajax_response("Editing Action Handler | #{@action_handler.label}") do
%Q`
  ///////////////////////////////////////////UPPER SIDE PANEL FOR MAIN INFO//////////////////////////////////////////////

  var updateValue = function(params){
    Ext.Ajax.request({
      url:#{action_handler_path(@action_handler).to_json}
      ,method:"PUT"
      ,params:params
      ,success:function(response, options){
        var response = Ext.decode(response.responseText);
        if(!response.success)
          Ext.Msg.alert("Update FAILED", "Errors: " + response.errors);
      }
      ,failure:function(response, options){
        Ext.Msg.alert("Update FAILED", "Connection failed, please try again");
      }
    })
  };

  var nameField = new Ext.form.TextField({
    name:"action_handler[name]"
    ,value:#{@action_handler.name.to_json}
    ,fieldLabel:"Name"
    ,listeners:{
      change:function(cpt, newValue, oldValue){
        updateValue({"action_handler[name]":newValue})
      }
    }
  });

  var labelField = new Ext.form.TextField({
    name:"action_handler[label]"
    ,value:#{@action_handler.label.to_json}
    ,fieldLabel:"Label"
    ,listeners:{
      change:function(cpt, newValue, oldValue){
        updateValue({"action_handler[label]":newValue})
      }
    }
  });

  var descriptionField = new Ext.form.TextArea({
    name:"action_handler[description]"
    ,value:#{@action_handler.description.to_json}
    ,fieldLabel:"Description"
    ,width:550
    ,height:80
    ,listeners:{
      change:function(cpt, newValue, oldValue){
        updateValue({"action_handler[description]":newValue})
      }
    }
  });

  var leftUpperPanel = new Ext.Panel({
    layout:"form"
    ,items:[nameField, labelField]
    ,width:300
  });

  var activatedOnCheckbox = new Ext.form.Checkbox({
    fieldLabel:"Activated"
    ,checked:#{!@action_handler.activated_at.nil?}
    ,listeners:{
      'check':function(me, checked){
        if(checked){
          activatedOnDateField.enable();
          updateValue({"action_handler[activated_at]":activatedOnDateField.getValue().format("M j, Y")});
        }else{
          activatedOnDateField.disable();
          updateValue({"action_handler[activated_at]":""});
        }
      }
    }
  });

  var activatedOnDateField = new Ext.form.DateField({
    fieldLabel:"on"
    ,labelSeparator:""
    ,format:"M j, Y"
    ,value:#{(@action_handler.activated_at.nil? ? Time.now : @action_handler.activated_at).strftime(DATE_STRFTIME_FORMAT).to_json}
    ,disabled:#{@action_handler.activated_at.nil?}
    ,listeners:{
      change:function(cpt, newValue, oldValue){
        updateValue({"action_handler[activated_at]":newValue.format("M j, Y")});
      }
    }
  });

  var deactivatedOnCheckbox = new Ext.form.Checkbox({
    fieldLabel:"Deactivated"
    ,checked:#{!@action_handler.deactivated_at.nil?}
    ,listeners:{
      'check':function(me, checked){
        if(checked){
          deactivatedOnDateField.enable();
          updateValue({"action_handler[deactivated_at]":activatedOnDateField.getValue().format("M j, Y")});
        }else{
          deactivatedOnDateField.disable();
          updateValue({"action_handler[deactivated_at]":""});
        }
      }
    }
  });

  var deactivatedOnDateField = new Ext.form.DateField({
    fieldLabel:"on"
    ,format:"M j, Y"
    ,labelSeparator:""
    ,value:#{(@action_handler.deactivated_at.nil? ? Time.now : @action_handler.deactivated_at).strftime(DATE_STRFTIME_FORMAT).to_json}
    ,disabled:#{@action_handler.deactivated_at.nil?}
    ,listeners:{
      change:function(cpt, newValue, oldValue){
        updateValue({"action_handler[deactivated_at]":newValue.format("M j, Y")});
      }
    }
  });

  var rightUpperPanel = new Ext.Panel({
    layout:"column"
    ,defaults:{
      layout:"form"
    }
    ,items:[
      {columnWidth:0.33, labelWidth:70, items:[activatedOnCheckbox]}
      ,{columnWidth:0.67, labelWidth:25, items:[activatedOnDateField]}
      ,{columnWidth:0.33, labelWidth:70, items:[deactivatedOnCheckbox]}
      ,{columnWidth:0.67, labelWidth:25, items:[deactivatedOnDateField]}
      ]
    ,width:300
  });

  var midPanel = new Ext.Panel({
    layout:"form"
    ,items:[descriptionField]
  });

  var upperPanel = new Ext.Panel({
    layout:"column"
    ,items:[leftUpperPanel, rightUpperPanel]
  });

  //======================================END OF UPPER SIDE PANEL (MAIN INFO)===========================================//

  ///////////////////////////////////////////// SEQUENCES GRID PANEL /////////////////////////////////////////////////////
  var SequenceRecord = new Ext.data.Record.create([
    {name:'action', type:"string"}
    ,{name:'period', type:"string"}
    ,{name:'from', type:"string"}
    ,{name:'conditions', type:"string"}
    ,{name:'recipients_num', type:"int"}
    ,{name:'id', type:"int"}
  ]);

  var sequencesReader = new Ext.data.JsonReader({totalProperty:"total", root:"collection"}, SequenceRecord);
  var sequencesConnection = new Ext.data.Connection({
    url:#{formatted_action_handler_action_handler_sequences_path(:action_handler_id => @action_handler.id, :format => :json).to_json}
    ,method:"GET"
  });
  var sequencesProxy = new Ext.data.HttpProxy(sequencesConnection);

  var sequencesStore = new Ext.data.Store({
    proxy:sequencesProxy
    ,reader:sequencesReader
    ,remoteSort:false
  });
  
  var newAction = new Ext.Action({
    text:"New"
    ,iconCls:"display_none"
    ,handler:function(btn){
      console.log("im clicked %o", btn);
    }
  });

  var deleteAction = new Ext.Action({
    text:"Delete"
    ,iconCls:"display_none"
    ,disabled:true
    ,handler:function(btn){
      console.log("im clicked %o", btn);
    }
  });
    
  var sequencesGrid = new Ext.grid.GridPanel({
    store:sequencesStore
    ,title:"Sequences (Double click to edit)"
    ,cm:new Ext.grid.ColumnModel([
      { 
        id:'action'
        ,header:"Action"
        ,width:300
        ,dataIndex:"action"
        ,sortable:false
      }
      ,{header:"Period", dataIndex:"period", sortable:false}
      ,{header:"From", dataIndex:"from", width:100, sortable:false}
      ,{header:"Conditions", dataIndex:"conditions", width:100, sortable:false}
      ,{header:"Recipients #", dataIndex:"recipients_num", width:100, sortable:false}
    ])
    ,enableDragDrop:true
    ,bbar:new Ext.Toolbar({items:[newAction, deleteAction]})
    ,listeners:{
      render:function(cpt){
        cpt.setHeight(cpt.ownerCt.getSize().height-135);
      }
    }
  })

  var selectedIds = new Array();
  var selectedRecords = new Array();
  
  sequencesGrid.getSelectionModel().on("selectionchange", function(sm){
    selectedRecords = sm.getSelections();
    var ids = new Array();
    selectedRecords.each( function(e) {
      ids.push(e.get("id"));
    });
    selectedIds = ids;
    
    if(ids.length>0){
      deleteAction.enable();
    }
    else{
      deleteAction.disable();
    }
  });


  //=========================================END OF SEQUENCES GRID PANEL================================================//


  var wrapperPanel = new Ext.Panel({
    items:[upperPanel, midPanel, sequencesGrid]
  });

  newPanel.add(wrapperPanel);
`
end
